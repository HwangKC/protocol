<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [


 	<!ENTITY RFC5246 SYSTEM
	"http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">

	<!ENTITY RFC2119 SYSTEM
	"http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">

	<!ENTITY RFC6066 SYSTEM
	"http://xml.resource.org/public/rfc/bibxml/reference.RFC.6066.xml">

	<!ENTITY RFC6347 SYSTEM
	"http://xml.resource.org/public/rfc/bibxml/reference.RFC.6347.xml">

	<!ENTITY RFC4559 SYSTEM
	"http://xml.resource.org/public/rfc/bibxml/reference.RFC.4559.xml">

	<!ENTITY RFC2616 SYSTEM
	"http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml">

]>



<?rfc rfcedstyle="yes" ?>
<?rfc subcompact="no" ?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>

<rfc category="historic" ipr="trust200902" docName="draft-openconnect-01">
   <front>
      <title abbrev="The OpenConnect Version 1.0">The OpenConnect VPN Protocol Version 1.0</title>

      <author initials="N." surname="Mavrogiannopoulos" fullname="Nikos Mavrogiannopoulos">
         <organization>Red Hat</organization>
      </author>

      <date month="January" year="2015"/>
      <area>Security</area>
<!--      <workgroup>TLS Working Group</workgroup> -->
      <keyword>SSL</keyword>
      <keyword>TLS</keyword>
      <keyword>VPN</keyword>
      <keyword>Secure sockets layer</keyword>
      <keyword>Virtual Private Network</keyword>
      <keyword>Transport layer security</keyword>


      <abstract>
<t>
   This document specifies version 1.0 of the OpenConnect VPN
   protocol, a secure VPN protocol that provides
   communications privacy over the Internet.  That protocol is believed
   to be compatible with CISCO's AnyConnect VPN protocol. The protocol allows
   the establishment of VPN tunnels in a way that is designed
   to prevent eavesdropping, tampering, or message forgery.
         </t>
      </abstract>

   </front>

<middle>


<section anchor="intro" title="Introduction">
    <t>
   The purpose of this document is to specify the OpenConnect VPN protocol
   in a detail in order to allow for multiple interoperable implementations.
   That is a protocol that is believed to be compatible with CISCO's
   AnyConnect protocol.
   </t>
   <t>
   While there are many competing VPN protocol solutions, none of
   them was ever described in a publicly available document. Even open
   source VPN solutions have their source code as the primary description
   of their protocol. That allowed no easy study of each protocol's
   properties and weaknesses, and that is one of the points addressed
   by this document.
   </t>
</section>

<section anchor="goals-document" title="Goals of This Document">
<t>
   The OpenConnect protocol version 1.0 specification is intended primarily
   for readers who will be implementing the protocol and those doing
   cryptographic analysis of it.
</t>
</section>

<section anchor="oc-protocol" title="The OpenConnect Protocol">
<t>
   The OpenConnect protocol combines the TLS protocol <xref
   target="RFC5246"/>, datagram TLS protocol <xref
   target="RFC6347"/> and HTTP protocols <xref
   target="RFC2616"/> to provide an Internet-Layer VPN channel.
   The channel is designed to operate using UDP packets, and
   fallback on TCP if that's not possible.
</t>
<t>
   In brief the protocol initiates an HTTP over TLS connection
   on a known port, where client authentication is performed. After
   this step, the client initiates an HTTP CONNECT command to
   establish a VPN channel over TCP. A secondary VPN channel over
   UDP will be established using information provided by the server
   using HTTP headers. At that point the raw IP packets flow, over
   the VPN channels.
</t>

<section anchor="session-establishment" title="VPN Session Establishment">

  <section anchor="authentication" title="Authentication">
  <t>
  The OpenConnect VPN protocol allows for the following types of
  client authentication, or combinations of them.
	<list style="numbers">
	<t>Password: a user can authenticate itself using a password.</t>
	<t>Certificate: a user can authenticate itself using a PKIX certificate
	it possesses.</t>
	<t>GSSAPI: a user can authenticate itself using a Kerberos ticket, or any
	other GSSAPI mechanism.</t>
    </list>
  The server is authenticated to the client using a PKIX certificate.
  </t>

  <section anchor="authentication_cert" title="Authentication using certificates">
  <t>
  Once a client establishes a TCP connection to the server's well known
  port, it initiates the TLS protocol. The server may require
  a client certificate to be presented, depending on its configuration.
  In the first connection to the server, the client SHOULD verify the 
  provided by the server certificate, and SHOULD store its public key for 
  verification of subsequent sessions. Thus, subsequent sessions will
  simply check whether the server's key match the initial.
  </t>
  </section>

  <section anchor="authentication_pass" title="Authentication using passwords">
  <t>
  [XXX: We need to define a DTD]

  After the TLS session is established the client sends an HTTP POST request
  on "/" with the following contents.
  <figure><artwork><![CDATA[
    <?xml version="1.0" encoding="UTF-8"?>
    <config-auth client="vpn" type="init">
        <version who="vpn">v5.01</version>
    </config-auth>
  ]]></artwork></figure>
  </t>
  <t>
  Note that all Content-Types specified in this section are 'text/xml'. At
  this point the server will reply using forms the client software should prompt the
  user to fill in.

  <figure><artwork><![CDATA[
    <?xml version="1.0" encoding="UTF-8"?>
    <auth id="main">
        <message>Please enter your username</message>
        <form action="/auth" method="post">
            <input label="Username:" name="username" type="text" />
        </form>
    </auth>
  ]]></artwork></figure>

  [XXX: groups?]
  The client may be asked to provide the information in separate forms as
  above, or may be asked combined as below.
  <figure><artwork><![CDATA[
    <?xml version="1.0" encoding="UTF-8"?>
    <auth id="main">
        <message>Please enter your username</message>
        <form action="/auth" method="post">
            <input label="Username:" name="username" type="text" />
            <input label="Password:" name="password" type="password" />
        </form>
    </auth>
  ]]></artwork></figure>
  </t>
  <t>
  The client software will then fill in the provided form and sent it back
  to the server using an HTTP POST on the location specified by the server
  (in the above examples it was "/auth"). The reply could then be the
  following.
  <figure><artwork><![CDATA[
    <?xml version="1.0" encoding="UTF-8"?>
    <config-auth client="vpn" type="auth-reply">
        <version who="vpn">v5.01</version>
        <auth><username>test</username>
        </auth>
    </config-auth>  
  ]]></artwork></figure>
  </t>
  <t>
  As mentioned above, the server may ask repeatedly for information until it
  believes the user is authenticated. For example, the server could present
  a second form asking for the password, after the username is provided, or
  ask for a second password if that is necessary. In these cases the server
  should respond with an HTTP 200 OK status code, and proceed sending its
  new request.
  </t>
  <t>
  If client authentication fails, the server MUST respond with an HTTP 401
  unauthorized status code. Otherwise the server should reply using the
  following XML structure.
  <figure><artwork><![CDATA[
    <?xml version="1.0" encoding="UTF-8"?>
    <config-auth client="vpn" type="complete">
        <version who="sg">0.1(1)</version>
        <auth id="success">
        </auth>
    </config-auth>
  ]]></artwork></figure>
  </t>
  </section>
  
  <section anchor="authentication_gssapi" title="Authentication using GSSAPI">
<t>
The GSSAPI authentication is performed using the SPNEGO protocol <xref
target="RFC4559"/> with the following exception. A client which
supports the SPNEGO protocol, should indicate it using the following header
on in its initial request to the server.
</t>
<t>
<figure>
<artwork><![CDATA[
    X-Support-HTTP-Auth: true
]]></artwork>
</figure></t>
<t>
After that the server would report a "401 Unauthorized" status code
as specified in the SPNEGO protocol. The server may utilize the following
header, to indicate that alternative authentication methods are available
(e.g., with plain password), if SPNEGO authentication fails.
</t>
<t>
<figure><artwork><![CDATA[
    X-Support-HTTP-Auth: fallback
]]></artwork></figure>
</t>
<t>
A client seeing the following header should retry authenticating to the
server without sending the "X-Support-HTTP-Auth: true" header.
</t>
  </section>

  </section>

  <section anchor="params-exchange" title="Exchange of Session Parameters">
  <t>
  By the receipt of a success XML structure, the client should issue an HTTP
  CONNECT request. In addition it should provide the "X-CSTP-Address-Type"
  and "X-CSTP-Base-MTU" headers. The X-CSTP-Address-Type contains one of the
  following values.
       <list style="hanging">
       <t>IPv4: when the client only supports IPv4 addresses.</t>
       <t>IPv6: when the client only supports IPv6 addresses.</t>
       <t>IPv4,IPv6: when the client supports both types of IP addresses.</t>
       </list>
  The X-CSTP-Base-MTU contains the MTU of the link between the client and the
  server as estimated by the client. An example CONNECT request is shown
  below.
  <figure><artwork><![CDATA[
    User-Agent: Open AnyConnect VPN Agent v5.01
    X-CSTP-Base-MTU: 1280
    X-CSTP-Address-Type: IPv6,IPv4
    CONNECT /CSCOSSLC/tunnel HTTP/1.1
  ]]></artwork></figure>
  </t>
  <t>
  After a successful receipt of an HTTP CONNECT request, the server should
  reply and provide the client with configuration parameters. The available
  options follow.

       <list style="hanging">
       <t>X-CSTP-Address: The IPv4 address of the client, if IPv4 has been
       requested.</t>
       <t>X-CSTP-Netmask: The IPv4 netmask of the client, if IPv4 has been
       requested.</t>
       <t>X-CSTP-Address-IP6: The IPv6 address of the client in CIDR
       notation, if IPv6 has been requested.</t>
       <t>X-CSTP-DNS: The IP address of a DNS server that can be used for
       that session.</t>
       <t>X-CSTP-Default-Domain: The DNS domains the provided DNS servers
       respond for.</t>
       <t>X-CSTP-Split-Include: The network address of a route which is
       provided by this server.</t>
       <t>X-CSTP-Split-Exclude: The network address of a route that is not
       provided by this server.</t>
       <t>X-CSTP-Base-MTU: The MTU of the link as estimated by this
       server.</t>
       <t>X-CSTP-DynDNS: Set to "true" if the server is operating on a
       dynamic DNS.</t>
       </list>
  [XXX: compression]
  </t>
  </section>

  <section anchor="primary-channel" title="Establishment of Primary (TCP) Channel">
  <t>The previous HTTP message is the last HTTP message sent by the server.
  After that message, the established TCP channel is used to transport IP
  packets between the client and the server. The transferred packets
  encoding is discussed in <xref target="primary-channel-protocol"/>.
  </t>
  </section>

  <section anchor="secondary-channel-establishment" title="Establishment of Secondary (UDP) Channel">
  <t>To establish the secondary UDP channel the client must advertise
  support for it during the issue of the HTTP CONNECT request. This
  is done by appending the following headers.
       <list style="hanging">
	<t>X-DTLS-Master-Secret: A hex encoded pre-master secret to be used
	for the DTLS session.</t>
	<t>X-DTLS-CipherSuite: A colon-separated list of ciphers (e.g., the
	string AES256-SHA:AES128-SHA:DES-CBC3-SHA).</t>
       </list>
  </t>
  <t>
  The DTLS established DTLS channel utilizes session resumption as a method
  for preshared-key authentication. That is the value presented in
  X-DTLS-Master-Secret is set as a master secret to be resumed.
  </t>
  <t>
  The following table lists the ciphers negotiated via the
  X-DTLS-CipherSuite header, and the corresponding DTLS ciphersuite.
  	</t>
	<texttable anchor='cipher_table'>
		<preamble></preamble>
		<ttcol width="30%" align='center'>OpenConnect cipher</ttcol>
		<ttcol width="40%" align='center'>DTLS ciphersuite</ttcol>
		<ttcol width="20%" align='center'>DTLS version</ttcol>
<c>   DES-CBC3-SHA</c><c>TLS_RSA_WITH_AES_128_CBC_SHA1</c><c>DTLS 0.9 (pre-draft version)</c>
<c>   AES128-SHA</c><c>TLS_RSA_WITH_3DES_EDE_CBC_SHA1s</c><c>DTLS 0.9 (pre-draft version)</c>
<c>   OC-DTLS1_2-AES128-GCM</c><c>TLS_RSA_WITH_AES_128_GCM_SHA256</c><c>DTLS 1.2</c>
<c>   OC-DTLS1_2-AES256-GCM</c><c>TLS_RSA_WITH_AES_256_GCM_SHA256</c><c>DTLS 1.2</c>
		<postamble></postamble>
	</texttable>
  </section>

</section>

<section anchor="primary-channel-protocol" title="The Primary Channel Protocol">
<t>
The format of the packets sent over the primary channel consists of an
8-bytes header followed by data. The whole packet
in encapsulated in a TLS record (see <xref
 target="RFC5246"/>). The bytes of the header indicate the type of data
that follow, and are listed in <xref target="cstp_table"/>.
</t>

	<texttable anchor='cstp_table'>
		<preamble></preamble>
		<ttcol width="30%" align='center'>byte</ttcol>
		<ttcol width="30%" align='left'>value</ttcol>
<c>0</c><c>fixed to 0x53 (S)</c>
<c>1</c><c>fixed to 0x54 (T)</c>
<c>2</c><c>fixed to 0x46 (F)</c>
<c>3</c><c>fixed to 0x01</c>
<c>4-5</c><c>The length of the packet in big endian order</c>
<c>6</c><c>The type of the data that follows (see <xref target="packet_table"/> for available types)</c>
<c>7</c><c>fixed to 0x00</c>
		<postamble></postamble>
	</texttable>

<t>
The available data types are listed in <xref target="packet_table"/>.
</t>
	<texttable anchor='packet_table'>
		<preamble></preamble>
		<ttcol width="30%" align='center'>Value</ttcol>
		<ttcol width="50%" align='left'>Description</ttcol>
<c>0x00</c><c>Data: the TLS record packet contains an IPv4 or IPv6 packet</c>
<c>0x03</c><c>DPD-REQ: used for dead peer detection. Once sent the peer
should reply with a DPD-RESP packet, that has the same contents as the
original request.</c>
<c>0x04</c><c>DPD-RESP: used as a response to a previously received DPD-REQ.</c>
<c>0x05</c><c>Disconnect: sent by the client (or server) to terminate the session.
No data is associated with this request.</c>
<c>0x07</c><c>Keepalive: sent by any peer. No data is associated with this
request.</c>
<c>0x08</c><c>Compressed Data: a Data packet which is compressed prior to encryption.</c>
<c>0x09</c><c>Terminate: sent by the server to indicate that the server is shutting down. No data is associated with this
request.</c>
		<postamble></postamble>
	</texttable>
</section>

<section anchor="secondary-channel-protocol" title="The Secondary (UDP) Channel Protocol">
<t>
The format of the packets sent over the UDP channel consists of an
1-byte header followed by data. The header byte 
indicates the type of data that follow as in <xref target="packet_table"/>.
The header and the data are encapsulated in a DTLS record packet
(see <xref target="RFC6347"/>).
</t>
</section>

<section anchor="rekey-protocol" title="The Channel Re-Key Protocol">
<t>
xxx
</t>
</section>

<section anchor="dead-peer-detection" title="The Dead Peer Detection Protocol">
<t>
xxx
</t>
</section>

</section>

<section anchor="security-analysis" title="Security Considerations">
	<t>
	   None yet.
	</t>
</section>

<section title="Acknowledgements">
<t>
None yet.
</t>
</section>

  </middle>

  <back>

    <references title="Normative References"><!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml"?-->
	&RFC5246;

	&RFC6347;

	&RFC2616;

	&RFC4559;

	<!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
	&RFC2119;
	
    </references>

  </back>
</rfc>
