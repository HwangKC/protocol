



Network Working Group                               N. Mavrogiannopoulos
Internet-Draft                                                   Red Hat
Intended status: Historic                                   January 2015
Expires: July 5, 2015


                The OpenConnect VPN Protocol Version 1.0
                          draft-openconnect-01

Abstract

   This document specifies version 1.0 of the OpenConnect VPN protocol,
   a secure VPN protocol that provides communications privacy over the
   Internet.  That protocol is believed to be compatible with CISCO's
   AnyConnect VPN protocol.  The protocol allows the establishment of
   VPN tunnels in a way that is designed to prevent eavesdropping,
   tampering, or message forgery.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on July 5, 2015.

Copyright Notice

   Copyright (c) 2015 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of




Mavrogiannopoulos         Expires July 5, 2015                  [Page 1]

Internet-Draft         The OpenConnect Version 1.0          January 2015


   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Requirements Terminology  . . . . . . . . . . . . . . . .   2
     1.2.  Goals of This Document  . . . . . . . . . . . . . . . . .   2
   2.  The OpenConnect Protocol  . . . . . . . . . . . . . . . . . .   3
     2.1.  VPN Session Establishment . . . . . . . . . . . . . . . .   3
       2.1.1.  Server Authentication . . . . . . . . . . . . . . . .   3
       2.1.2.  Client Authentication . . . . . . . . . . . . . . . .   3
       2.1.3.  Exchange of Session Parameters  . . . . . . . . . . .   6
       2.1.4.  Establishment of Primary TCP Channel (CSTP) . . . . .   8
       2.1.5.  Establishment of Secondary UDP Channel (DTLS) . . . .   8
     2.2.  The CSTP Channel Protocol . . . . . . . . . . . . . . . .   9
     2.3.  The DTLS Channel Protocol . . . . . . . . . . . . . . . .  11
     2.4.  The Channel Re-Key Protocol . . . . . . . . . . . . . . .  11
     2.5.  The Keepalive and Dead Peer Detection Protocols . . . . .  12
   3.  Security Considerations . . . . . . . . . . . . . . . . . . .  13
   4.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  13
   5.  Normative References  . . . . . . . . . . . . . . . . . . . .  13

1.  Introduction

   The purpose of this document is to specify the OpenConnect VPN
   protocol in a detail in order to allow for multiple interoperable
   implementations.  That is a protocol that is believed to be
   compatible with CISCO's AnyConnect protocol.

   While there are many competing VPN protocol solutions, none of them
   was ever described in a publicly available document.  Even open
   source VPN solutions have their source code as the primary
   description of their protocol.  That allowed no easy study of each
   protocol's properties and weaknesses, and that is one of the points
   addressed by this document.

1.1.  Requirements Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

1.2.  Goals of This Document

   The OpenConnect protocol version 1.0 specification is intended
   primarily for readers who will be implementing the protocol and those
   doing cryptographic analysis of it.



Mavrogiannopoulos         Expires July 5, 2015                  [Page 2]

Internet-Draft         The OpenConnect Version 1.0          January 2015


2.  The OpenConnect Protocol

   The OpenConnect protocol combines the TLS protocol [RFC5246],
   datagram TLS protocol [RFC6347] and HTTP protocols [RFC2616] to
   provide an Internet-Layer VPN channel.  The channel is designed to
   operate using UDP packets, and fallback on TCP if that's not
   possible.

   In brief the protocol initiates an HTTP over TLS connection on a
   known port, where client authentication is performed.  After this
   step, the client initiates an HTTP CONNECT command to establish a VPN
   channel over TCP.  A secondary VPN channel over UDP will be
   established using information provided by the server using HTTP
   headers.  At that point the raw IP packets flow, over the VPN
   channels.

2.1.  VPN Session Establishment

2.1.1.  Server Authentication

   In the OpenConnect VPN protocol, the server is always authenticated
   using its certificate.  Once a client establishes a TCP connection to
   the server's well known port, it initiates the TLS protocol.  In the
   first connection to the server, the client SHOULD verify the provided
   by the server certificate, and SHOULD store its public key for
   verification of subsequent sessions.  Thus, subsequent sessions
   SHOULD check whether the server's key match the initial.

   The server's identity in the certificate SHOULD be placed in the
   certificate's SubjectAlternativeName field, and unless a special
   profile is assumed, it will be of type DNSName.

2.1.2.  Client Authentication

   The OpenConnect VPN protocol allows for the following types of client
   authentication, or combinations of them.

   1.  Password: a user can authenticate itself using a password.

   2.  Certificate: a user can authenticate itself using a PKIX
       certificate it possesses.

   3.  HTTP SPNEGO: a user can authenticate itself using a Kerberos
       ticket, or any other mechanism supported by SPNEGO (i.e.,
       GSSAPI).

   The server is authenticated to the client using a PKIX certificate
   presented during the TLS negotiation.



Mavrogiannopoulos         Expires July 5, 2015                  [Page 3]

Internet-Draft         The OpenConnect Version 1.0          January 2015


   It is important to note that during the password and HTTP SPNEGO
   authentication methods, any headers allowed by the HTTP protocol can
   be present.  In fact, a there are legacy clients which assume that
   the server will keep a state using cookies, and send their username
   and password in different TLS and HTTP connections.  This practice
   prevents the server from binding the TLS channel with the VPN session
   [RFC5056], and is discouraged.  It is RECOMMENDED for clients to
   complete authentication in the same TLS session, and rely on TLS
   session resumption if reconnections to the server are needed.

2.1.2.1.  Authentication using certificates

   During the initial TLS protocol handshake the server may require a
   client certificate to be presented, depending on its configuration.

   Because the client certificate is sent in the clear during the
   handshake it SHOULD NOT contain other identifying information other
   than a username, or a pseudonymus identifier.  It is RECOMMENDED to
   place the user identifier in the DN field of the certificate, using
   the UID object identifier (0.9.2342.19200300.100.1.1) [RFC4519].

   [XXX: We need to define a DTD] After the TLS session is established
   the client sends an HTTP POST request on "/" with the following
   contents.

       <?xml version="1.0" encoding="UTF-8"?>
       <config-auth client="vpn" type="init">
           <version who="vpn">v5.01</version>
       </config-auth>

   If the HTTP response code is 200, and contains the following
   indication of a complete authentication, the client should proceed to
   the establishment of the primary channel as in Section 2.1.4.

       <?xml version="1.0" encoding="UTF-8"?>
       <config-auth client="vpn" type="complete">
         <version who="sg">0.1(1)</version>
         <auth id="success">
           <title>SSL VPN Service</title>
         </auth>
       </config-auth>

2.1.2.2.  Authentication using passwords

   After the TLS session is established the client sends an HTTP POST
   request on "/" with the following contents.





Mavrogiannopoulos         Expires July 5, 2015                  [Page 4]

Internet-Draft         The OpenConnect Version 1.0          January 2015


       <?xml version="1.0" encoding="UTF-8"?>
       <config-auth client="vpn" type="init">
           <version who="vpn">v5.01</version>
       </config-auth>

   Note that all Content-Types specified in this section are 'text/xml'.
   At this point the server will reply using forms the client software
   should prompt the user to fill in.

       <?xml version="1.0" encoding="UTF-8"?>
       <auth id="main">
           <message>Please enter your username</message>
           <form action="/auth" method="post">
               <input label="Username:" name="username" type="text" />
           </form>
       </auth>

   [XXX: groups?]  The client may be asked to provide the information in
   separate forms as above, or may be asked combined as below.

     <?xml version="1.0" encoding="UTF-8"?>
     <auth id="main">
         <message>Please enter your username</message>
         <form action="/auth" method="post">
             <input label="Username:" name="username" type="text" />
             <input label="Password:" name="password" type="password" />
         </form>
     </auth>

   The client software will then fill in the provided form and sent it
   back to the server using an HTTP POST on the location specified by
   the server (in the above examples it was "/auth").  The reply could
   then be the following.

       <?xml version="1.0" encoding="UTF-8"?>
       <config-auth client="vpn" type="auth-reply">
           <version who="vpn">v5.01</version>
           <auth><username>test</username>
           </auth>
       </config-auth>

   As mentioned above, the server may ask repeatedly for information
   until it believes the user is authenticated.  For example, the server
   could present a second form asking for the password, after the
   username is provided, or ask for a second password if that is
   necessary.  In these cases the server should respond with an HTTP 200
   OK status code, and proceed sending its new request.




Mavrogiannopoulos         Expires July 5, 2015                  [Page 5]

Internet-Draft         The OpenConnect Version 1.0          January 2015


   If client authentication fails, the server MUST respond with an HTTP
   401 unauthorized status code.  Otherwise, on successful
   authentication the server should reply with a 200 HTTP code and use
   the authentication complete structure as in Section 2.1.2.1.

2.1.2.3.  HTTP Authentication using SPNEGO

   That type of authentication is performed using the HTTP SPNEGO
   protocol [RFC4559], a method which is available using the Generic
   Security Service API [RFC2743].  The following approach is used to
   advertise the availability of the HTTP SPNEGO protocol by the client.
   A client which supports the HTTP SPNEGO protocol, SHOULD indicate it
   using the following header on in its initial request to the server.

       X-Support-HTTP-Auth: true

   After that the server would report a "401 Unauthorized" status code
   and authentication would proceed as specified in the HTTP SPNEGO
   protocol.  The server may utilize the following header, to indicate
   that alternative authentication methods are available (e.g., with
   plain password), if authentication fails.

       X-Support-HTTP-Auth: fallback

   If client authentication fails, the server MUST respond with an HTTP
   401 unauthorized status code.  In that case, a client which received
   the previous header should retry authenticating to the server without
   sending the "X-Support-HTTP-Auth: true" header.

   Otherwise, on successful authentication the server should reply with
   a 200 HTTP code and use the authentication complete structure as in
   Section 2.1.2.1.

2.1.3.  Exchange of Session Parameters

   By the receipt of a success XML structure, the client SHOULD issue an
   HTTP CONNECT request.  In addition it should provide the "X-CSTP-
   Address-Type" and "X-CSTP-Base-MTU" headers.  The X-CSTP-Address-Type
   contains one of the following values.

      IPv4: when the client only supports IPv4 addresses.

      IPv6: when the client only supports IPv6 addresses.

      IPv4,IPv6: when the client supports both types of IP addresses.






Mavrogiannopoulos         Expires July 5, 2015                  [Page 6]

Internet-Draft         The OpenConnect Version 1.0          January 2015


   The X-CSTP-Base-MTU contains the MTU of the link between the client
   and the server as estimated by the client.  An example CONNECT
   request is shown below.

       User-Agent: Open AnyConnect VPN Agent v5.01
       X-CSTP-Base-MTU: 1280
       X-CSTP-Address-Type: IPv4,IPv6
       CONNECT /CSCOSSLC/tunnel HTTP/1.1

   After a successful receipt of an HTTP CONNECT request, the server
   should reply and provide the client with configuration parameters.
   The available options follow.

      X-CSTP-Address: The IPv4 address of the client, if IPv4 has been
      requested.

      X-CSTP-Netmask: The IPv4 netmask of the client, if IPv4 has been
      requested.

      X-CSTP-Address-IP6: The IPv6 address of the client in CIDR
      notation, if IPv6 has been requested.

      X-CSTP-DNS: The IP address of a DNS server that can be used for
      that session.

      X-CSTP-Default-Domain: The DNS domains the provided DNS servers
      respond for.

      X-CSTP-Split-Include: The network address of a route which is
      provided by this server.

      X-CSTP-Split-Exclude: The network address of a route that is not
      provided by this server.

      X-CSTP-Base-MTU: The MTU of the link as estimated by this server.

      X-CSTP-DynDNS: Set to "true" if the server is operating with a
      dynamic DNS address.

   [XXX: compression]

   The client is expected to treat the received parameters as his
   networking settings.  If no "X-CSTP-Split-Include" headers are
   present, the client is expected to assign its default route through
   the VPN.






Mavrogiannopoulos         Expires July 5, 2015                  [Page 7]

Internet-Draft         The OpenConnect Version 1.0          January 2015


2.1.4.  Establishment of Primary TCP Channel (CSTP)

   The previous HTTP message is the last HTTP message sent by the
   server.  After that message, the established TCP channel is used to
   transport IP packets between the client and the server.  The
   transferred packets encoding is discussed in Section 2.2.  This
   channel will be referred as CSTP in the rest of this document.

2.1.5.  Establishment of Secondary UDP Channel (DTLS)

   To establish the secondary UDP-based channel, which will be referred
   to as the DTLS channel, the client must advertise support for it
   during the issue of the HTTP CONNECT request (see Section 2.1.3.
   This is done by appending the following headers to the request.

      X-DTLS-Master-Secret: A hex encoded pre-master secret to be used
      for the DTLS session.

      X-DTLS-CipherSuite: A colon-separated list of ciphers (e.g., the
      string AES256-SHA:AES128-SHA:DES-CBC3-SHA).

   The DTLS established DTLS channel utilizes session resumption as a
   method for preshared-key authentication.  That is the value presented
   in X-DTLS-Master-Secret is set as a master secret to be resumed.  The
   session ID value is sent by the server on the response to CONNECT
   using the 'X-DTLS-Session-ID' header.  That header provides a hex-
   encoded value of the DTLS session ID to be used by the client.

   The following table lists the ciphers negotiated via the X-DTLS-
   CipherSuite header, and the corresponding DTLS ciphersuite.





















Mavrogiannopoulos         Expires July 5, 2015                  [Page 8]

Internet-Draft         The OpenConnect Version 1.0          January 2015


   +--------------------+---------------------------------+------------+
   | OpenConnect cipher |         DTLS ciphersuite        |    DTLS    |
   |                    |                                 |  version   |
   +--------------------+---------------------------------+------------+
   |    DES-CBC3-SHA    |  TLS_RSA_WITH_3DES_EDE_CBC_SHA1 |  DTLS 0.9  |
   |                    |                                 | (pre-draft |
   |                    |                                 |  version)  |
   |                    |                                 |            |
   |     AES128-SHA     |  TLS_RSA_WITH_AES_128_CBC_SHA1  |  DTLS 0.9  |
   |                    |                                 | (pre-draft |
   |                    |                                 |  version)  |
   |                    |                                 |            |
   |     AES256-SHA     |  TLS_RSA_WITH_AES_256_CBC_SHA1  |  DTLS 0.9  |
   |                    |                                 | (pre-draft |
   |                    |                                 |  version)  |
   |                    |                                 |            |
   |        OC-         | TLS_RSA_WITH_AES_128_GCM_SHA256 |  DTLS 1.2  |
   | DTLS1_2-AES128-GCM |                                 |            |
   |                    |                                 |            |
   |        OC-         | TLS_RSA_WITH_AES_256_GCM_SHA256 |  DTLS 1.2  |
   | DTLS1_2-AES256-GCM |                                 |            |
   +--------------------+---------------------------------+------------+

                                  Table 1

2.2.  The CSTP Channel Protocol

   The format of the packets sent over the primary channel consists of
   an 8-bytes header followed by data.  The whole packet in encapsulated
   in a TLS record (see [RFC5246]).  The bytes of the header indicate
   the type of data that follow, and their contents are explained in
   Table 2.



















Mavrogiannopoulos         Expires July 5, 2015                  [Page 9]

Internet-Draft         The OpenConnect Version 1.0          January 2015


   +---------------------+---------------------------------------------+
   |         byte        | value                                       |
   +---------------------+---------------------------------------------+
   |          0          | fixed to 0x53 (S)                           |
   |                     |                                             |
   |          1          | fixed to 0x54 (T)                           |
   |                     |                                             |
   |          2          | fixed to 0x46 (F)                           |
   |                     |                                             |
   |          3          | fixed to 0x01                               |
   |                     |                                             |
   |         4-5         | The length of the packet that follows this  |
   |                     | header in big endian order                  |
   |                     |                                             |
   |          6          | The type of the data that follows (see      |
   |                     | Table 3 for available types)                |
   |                     |                                             |
   |          7          | fixed to 0x00                               |
   +---------------------+---------------------------------------------+

                                  Table 2

   The available data types are listed in Table 3.




























Mavrogiannopoulos         Expires July 5, 2015                 [Page 10]

Internet-Draft         The OpenConnect Version 1.0          January 2015


   +---------------------+---------------------------------------------+
   |        Value        | Description                                 |
   +---------------------+---------------------------------------------+
   |         0x00        | DATA: the TLS record packet contains an     |
   |                     | IPv4 or IPv6 packet                         |
   |                     |                                             |
   |         0x03        | DPD-REQ: used for dead peer detection. Once |
   |                     | sent the peer should reply with a DPD-RESP  |
   |                     | packet, that has the same contents as the   |
   |                     | original request.                           |
   |                     |                                             |
   |         0x04        | DPD-RESP: used as a response to a           |
   |                     | previously received DPD-REQ.                |
   |                     |                                             |
   |         0x05        | DISCONNECT: sent by the client (or server)  |
   |                     | to terminate the session.  No data is       |
   |                     | associated with this request. The session   |
   |                     | will be invalidated after such request.     |
   |                     |                                             |
   |         0x07        | KEEPALIVE: sent by any peer. No data is     |
   |                     | associated with this request.               |
   |                     |                                             |
   |         0x08        | COMPRESSED DATA: a Data packet which is     |
   |                     | compressed prior to encryption.             |
   |                     |                                             |
   |         0x09        | TERMINATE: sent by the server to indicate   |
   |                     | that the server is shutting down. No data   |
   |                     | is associated with this request.            |
   +---------------------+---------------------------------------------+

                                  Table 3

2.3.  The DTLS Channel Protocol

   The format of the packets sent over the UDP channel consists of an
   1-byte header followed by data.  The header byte indicates the type
   of data that follow as in Table 3.  The header and the data are
   encapsulated in a DTLS record packet (see [RFC6347]).

2.4.  The Channel Re-Key Protocol

   During the exchange of session parameters (Section 2.1.3), the server
   advertizes the methods available for session rekey using the "X-CSTP-
   Rekey-Method" and "X-DTLS-Rekey-Method" HTTP headers.  The available
   options for both the server and client are listed below.

   1.  none: no rekey; the session will go on until 2^48 DTLS records
       have been exchanged, or 2^64 TLS records.



Mavrogiannopoulos         Expires July 5, 2015                 [Page 11]

Internet-Draft         The OpenConnect Version 1.0          January 2015


   2.  ssl: a TLS or DTLS rehandshake will be performed periodically.

   3.  new-tunnel: the session will tear down and the client will
       reconnect periodically.

   When the value is other than "none" the rekey period is determinated
   by the "X-CSTP-Rekey-Time" and "X-DTLS-Rekey-Time" headers.  These
   headers contain the time in seconds after which a session should
   rekey.

   It should be noted that when the "ssl" rekey option is used, care
   must be taken by both the client and the server to ensure that either
   safe renegotiation is used ([RFC5746]), or that the identity of the
   peer remained the same.

2.5.  The Keepalive and Dead Peer Detection Protocols

   In OpenConnect there are two packet types that can be used for keep-
   alive or dead peer detection, as shown in Table 3.  These are the
   DPD-REQ and KeepAlive packets.

   The timings of the transmission of these packets are set by the
   server, and they are advisory to a client.  However, any peer
   receiving these packets MUST response with the appropriate packet.
   For DPD-REQ packets, the response MUST be DPD-RESP, and for KeepAlive
   packets the response must be another KeepAlive packet.  The main
   difference between these two types of packets, is that the DPD
   packets allow for arbitrary data to be attached, making them suitable
   for Path MTU detection.

   The server advertizes the suggested periods during the exchange of
   session parameters (Section 2.1.3).  The available headers are listed
   below.

      X-CSTP-DPD: applicable to CSTP channel; contains a relative time
      in seconds.

      X-CSTP-Keepalive: applicable to CSTP channel; contains a relative
      time in seconds.

      X-DTLS-DPD: applicable to DTLS channel; contains a relative time
      in seconds.

      X-DTLS-Keepalive: applicable to DTLS channel; contains a relative
      time in seconds.






Mavrogiannopoulos         Expires July 5, 2015                 [Page 12]

Internet-Draft         The OpenConnect Version 1.0          January 2015


3.  Security Considerations

   None yet.

4.  Acknowledgements

   None yet.

5.  Normative References

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246, August 2008.

   [RFC5746]  Rescorla, E., Ray, M., Dispensa, S., and N. Oskov,
              "Transport Layer Security (TLS) Renegotiation Indication
              Extension", RFC 5746, February 2010.

   [RFC6347]  Rescorla, E. and N. Modadugu, "Datagram Transport Layer
              Security Version 1.2", RFC 6347, January 2012.

   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", RFC 2616, June 1999.

   [RFC4559]  Jaganathan, K., Zhu, L., and J. Brezak, "SPNEGO-based
              Kerberos and NTLM HTTP Authentication in Microsoft
              Windows", RFC 4559, June 2006.

   [RFC2743]  Linn, J., "Generic Security Service Application Program
              Interface Version 2, Update 1", RFC 2743, January 2000.

   [RFC5056]  Williams, N., "On the Use of Channel Bindings to Secure
              Channels", RFC 5056, November 2007.

   [RFC4519]  Sciberras, A., "Lightweight Directory Access Protocol
              (LDAP): Schema for User Applications", RFC 4519, June
              2006.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

Author's Address

   Nikos Mavrogiannopoulos
   Red Hat






Mavrogiannopoulos         Expires July 5, 2015                 [Page 13]
